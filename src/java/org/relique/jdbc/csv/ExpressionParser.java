/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
package org.relique.jdbc.csv;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.Calendar;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.LinkedList;
class NumericConstant extends Expression
{
        Number value;
        public NumericConstant(Number d)
        {
                value = d;
        }
        public Object eval(Map<String, Object> env)
        {
                return value;
        }
        public String toString()
        {
                return value.toString();
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
}
class StringConstant extends Expression
{
        String value;
        public StringConstant(String s)
        {
                value = s;
        }
        public Object eval(Map<String, Object> env)
        {
                return value;
        }
        public String toString()
        {
                return "'"+value+"'";
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
}
class NullConstant extends Expression
{
        public Object eval(Map<String, Object> env)
        {
                return null;
        }
        public String toString()
        {
                return "null";
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
}
class CurrentDateConstant extends Expression
{
        ExpressionParser parent;
        public CurrentDateConstant(ExpressionParser parent)
        {
                this.parent = parent;
        }
        public Object eval(Map<String, Object> env)
        {
                return parent.getCurrentDate();
        }
        public String toString()
        {
                return "CURRENT_DATE";
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
}
class CurrentTimeConstant extends Expression
{
        ExpressionParser parent;
        public CurrentTimeConstant(ExpressionParser parent)
        {
                this.parent = parent;
        }
        public Object eval(Map<String, Object> env)
        {
                return parent.getCurrentTime();
        }
        public String toString()
        {
                return "CURRENT_TIME";
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
}
class Placeholder extends Expression
{
        public static int nextIndex = 1;
        private int index;
        public Placeholder()
        {
                index = nextIndex;
                nextIndex++;
        }
        public Object eval(Map<String, Object> env)
        {
                return env.get("?" + index);
        }
        public String toString()
        {
                return "?";
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
}
class ColumnName extends Expression
{
        String columnName;
        public ColumnName(String columnName)
        {
                this.columnName = columnName.toUpperCase();
        }
        public Object eval(Map<String, Object> env)
        {
                return env.get(columnName);
        }
        public String toString()
        {
                return "["+columnName+"]";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.add(columnName);
                return result;
        }
}
class SQLLowerFunction extends Expression
{
        Expression expression;
        public SQLLowerFunction(Expression expression)
        {
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval = expression.eval(env);
                if (retval != null)
                        retval = retval.toString().toLowerCase();
                return retval;
        }
        public String toString()
        {
                return "LOWER("+expression+")";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(expression.aggregateFunctions());
                return result;
        }
}
class SQLRoundFunction extends Expression
{
        Expression expression;
        public SQLRoundFunction(Expression expression)
        {
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval = expression.eval(env);
                if (retval != null)
                {
                        if (!(retval instanceof Number))
                        {
                                try
                                {
                                        retval = new Double(retval.toString());
                                }
                                catch(NumberFormatException e)
                                {
                                        retval = null;
                                }
                        }
                        if (retval != null)
                        {
                                if (retval instanceof Short)
                                {
                                        retval = new Integer(((Short)retval).intValue());
                                }
                                else if (!(retval instanceof Integer || retval instanceof Long))
                                {
                                        double d = ((Number)retval).doubleValue();
                                        if (d < Integer.MIN_VALUE || d > Integer.MAX_VALUE)
                                                retval = new Double(Math.round(d));
                                        else
                                                retval = new Integer((int)Math.round(d));
                                }
                        }
                }
                return retval;
        }
        public String toString()
        {
                return "ROUND("+expression+")";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(expression.aggregateFunctions());
                return result;
        }
}
class SQLCalendarFunction extends Expression
{
        String functionName;
        int calendarField;
        Expression expression;
        public SQLCalendarFunction(String functionName, int calendarField,
                Expression expression)
        {
                this.functionName = functionName;
                this.calendarField = calendarField;
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval = null;
                Object o = expression.eval(env);
                if (o != null)
                {
                        /*
			 * Accept either java.sql.Date, java.sql.Time or java.sql.Timestamp.
			 */
                        java.util.Date date = null;
                        if (o instanceof java.util.Date)
                        {
                                date = (java.util.Date)o;
                        }
                        else
                        {
                                /*
				 * Try and convert from String to a Timestamp or Date/Time.
				 */
                                Expression stringConverter = new ColumnName("@StringConverter");
                                StringConverter sc = (StringConverter) stringConverter.eval(env);
                                date = sc.parseTimestamp(o.toString());
                                if (date == null)
                                {
                                        if (calendarField == Calendar.DAY_OF_MONTH ||
                                                calendarField == Calendar.MONTH ||
                                                calendarField == Calendar.YEAR)
                                        {
                                                date = sc.parseDate(o.toString());
                                        }
                                        else
                                        {
                                                date = sc.parseTime(o.toString());
                                        }
                                }
                        }
                        if (date != null)
                        {
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(date);
                                int fieldValue = cal.get(calendarField);
                                if (calendarField == Calendar.MONTH)
                                        fieldValue++;
                                retval = Integer.valueOf(fieldValue);
                        }
                }
                return retval;
        }
        public String toString()
        {
                return functionName+"("+expression+")";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(expression.aggregateFunctions());
                return result;
        }
}
class SQLDayOfMonthFunction extends SQLCalendarFunction
{
        public SQLDayOfMonthFunction(Expression expression)
        {
                super("DAYOFMONTH", Calendar.DAY_OF_MONTH, expression);
        }
}
class SQLMonthFunction extends SQLCalendarFunction
{
        public SQLMonthFunction(Expression expression)
        {
                super("MONTH", Calendar.MONTH, expression);
        }
}
class SQLYearFunction extends SQLCalendarFunction
{
        public SQLYearFunction(Expression expression)
        {
                super("YEAR", Calendar.YEAR, expression);
        }
}
class SQLHourOfDayFunction extends SQLCalendarFunction
{
        public SQLHourOfDayFunction(Expression expression)
        {
                super("HOUROFDAY", Calendar.HOUR_OF_DAY, expression);
        }
}
class SQLMinuteFunction extends SQLCalendarFunction
{
        public SQLMinuteFunction(Expression expression)
        {
                super("MINUTE", Calendar.MINUTE, expression);
        }
}
class SQLSecondFunction extends SQLCalendarFunction
{
        public SQLSecondFunction(Expression expression)
        {
                super("SECOND", Calendar.SECOND, expression);
        }
}
class SQLUpperFunction extends Expression
{
        Expression expression;
        public SQLUpperFunction(Expression expression)
        {
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval = expression.eval(env);
                if (retval != null)
                        retval = retval.toString().toUpperCase();
                return retval;
        }
        public String toString()
        {
                return "UPPER("+expression+")";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(expression.aggregateFunctions());
                return result;
        }
}
class SQLLengthFunction extends Expression
{
        Expression expression;
        public SQLLengthFunction(Expression expression)
        {
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval = expression.eval(env);
                if (retval != null)
                        retval = Integer.valueOf(retval.toString().length());
                return retval;
        }
        public String toString()
        {
                return "LENGTH("+expression+")";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(expression.aggregateFunctions());
                return result;
        }
}
class SQLNullIfFunction extends Expression
{
        Expression expression1;
        Expression expression2;
        public SQLNullIfFunction(Expression expression1, Expression expression2)
        {
                this.expression1 = expression1;
                this.expression2 = expression2;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval;
                Comparable value1 = (Comparable)expression1.eval(env);
                Comparable value2 = (Comparable)expression2.eval(env);
                Integer compared = RelopExpression.compare(value1, value2, env);

                if (compared != null && compared.intValue() == 0)
                        retval = null;
                else
                        retval = value1;
                return retval;
        }
        public String toString()
        {
                return "NULLIF("+expression1+","+expression2+")";
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression1.usedColumns());
                result.addAll(expression2.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(expression1.aggregateFunctions());
                result.addAll(expression2.aggregateFunctions());
                return result;
        }
}
abstract class AggregateFunction extends Expression
{
        public abstract List<String> aggregateColumns();
        public abstract void processRow(Map<String, Object> env);
}
class SQLCountFunction extends AggregateFunction
{
        HashSet<Object> distinctValues;
        Expression expression;
        int counter = 0;
        public SQLCountFunction(boolean isDistinct, Expression expression)
        {
                if (isDistinct)
                        this.distinctValues = new HashSet<Object>();
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Integer retval;
                Object o = env.get("@GROUPROWS");
                if (o != null)
                {
                        /*
			 * The count is the number of rows grouped together
			 * by the GROUP BY clause.
			 */
                        List groupRows = (List)o;
                        if (this.distinctValues != null)
                        {
                                HashSet<Object> unique = new HashSet<Object>();
                                for (int i = 0; i < groupRows.size(); i++)
                                {
                                        o = expression.eval((Map)groupRows.get(i));
                                        if (o != null)
                                                unique.add(o);
                                }
                                retval = Integer.valueOf(unique.size());
                        }
                        else
                        {
                                retval = Integer.valueOf(groupRows.size());
                        }
                }
                else
                {
                        if (this.distinctValues != null)
                                retval = Integer.valueOf(this.distinctValues.size());
                        else
                                retval = Integer.valueOf(counter);
                }
                return retval;
        }
        public String toString()
        {
                StringBuffer sb = new StringBuffer("COUNT(");
                if (distinctValues != null)
                        sb.append("DISTINCT ");
                sb.append(expression);
                sb.append(")");
                return sb.toString();
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
        public List<String> aggregateColumns()
        {
                List<String> result = new LinkedList<String>();
                if (!(expression instanceof AsteriskExpression))
                        result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.add(this);
                return result;
        }
        public void processRow(Map<String, Object> env)
        {
                if (expression instanceof AsteriskExpression)
                {
                        counter++;
                }
                else
                {
                        /*
			 * Only count non-null values.
			 */
                        Object o = expression.eval(env);
                        if (o != null)
                        {
                                counter++;
                                if (distinctValues != null)
                                {
                                        /*
					 * We want a count of DISTINCT values, so we have
					 * to keep a list of unique values.
					 */
                                        distinctValues.add(o);
                                }
                        }
                }
        }
}
class SQLMaxFunction extends AggregateFunction
{
        boolean isDistinct;
        Expression expression;
        Object max = null;
        public SQLMaxFunction(boolean isDistinct, Expression expression)
        {
                this.isDistinct = isDistinct;
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object o = env.get("@GROUPROWS");
                if (o != null)
                {
                        /*
			 * Find the maximum from the rows grouped together
			 * by the GROUP BY clause.
			 */
                        List groupRows = (List)o;
                        Object maxInGroup = null;
                        for (int i = 0; i < groupRows.size(); i++)
                        {
                                o = expression.eval((Map)groupRows.get(i));
                                if (o != null)
                                {
                                        if (maxInGroup == null || ((Comparable)maxInGroup).compareTo(o) < 0)
                                                maxInGroup = o;
                                }
                        }
                        return maxInGroup;
                }
                return max;
        }
        public String toString()
        {
                StringBuffer sb = new StringBuffer("MAX(");
                if (isDistinct)
                        sb.append("DISTINCT ");
                sb.append(expression);
                sb.append(")");
                return sb.toString();
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
        public List<String> aggregateColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.add(this);
                return result;
        }
        public void processRow(Map<String, Object> env)
        {
                /*
		 * Only consider non-null values.
		 */
                Object o = expression.eval(env);
                if (o != null)
                {
                        if (max == null || ((Comparable)max).compareTo(o) < 0)
                                max = o;
                }
        }
}
class SQLMinFunction extends AggregateFunction
{
        boolean isDistinct;
        Expression expression;
        Object min = null;
        public SQLMinFunction(boolean isDistinct, Expression expression)
        {
                this.isDistinct = isDistinct;
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object o = env.get("@GROUPROWS");
                if (o != null)
                {
                        /*
			 * Find the minimum from the rows grouped together
			 * by the GROUP BY clause.
			 */
                        List groupRows = (List)o;
                        Object minInGroup = null;
                        for (int i = 0; i < groupRows.size(); i++)
                        {
                                o = expression.eval((Map)groupRows.get(i));
                                if (o != null)
                                {
                                        if (minInGroup == null || ((Comparable)minInGroup).compareTo(o) > 0)
                                                minInGroup = o;
                                }
                        }
                        return minInGroup;
                }
                return min;
        }
        public String toString()
        {
                StringBuffer sb = new StringBuffer("MIN(");
                if (isDistinct)
                        sb.append("DISTINCT ");
                sb.append(expression);
                sb.append(")");
                return sb.toString();
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
        public List<String> aggregateColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.add(this);
                return result;
        }
        public void processRow(Map<String, Object> env)
        {
                /*
		 * Only consider non-null values.
		 */
                Object o = expression.eval(env);
                if (o != null)
                {
                        if (min == null || ((Comparable)min).compareTo(o) > 0)
                                min = o;
                }
        }
}
class SQLSumFunction extends AggregateFunction
{
        HashSet<Object> distinctValues;
        Expression expression;
        BigDecimal sum = null;
        int counter = 0;
        public SQLSumFunction(boolean isDistinct, Expression expression)
        {
                if (isDistinct)
                        this.distinctValues = new HashSet<Object>();
                this.expression = expression;
        }
        public Object eval(Map<String, Object> env)
        {
                Object retval = null;
                Object o = env.get("@GROUPROWS");
                if (o != null)
                {
                        /*
			 * Find the sum of rows grouped together
			 * by the GROUP BY clause.
			 */
                        List groupRows = (List)o;
                        BigDecimal groupSum = null;
                        counter = 0;
                        if (this.distinctValues != null)
                        {
                                HashSet<Object> unique = new HashSet<Object>();
                                for (int i = 0; i < groupRows.size(); i++)
                                {
                                        o = expression.eval((Map)groupRows.get(i));
                                        if (o != null)
                                                unique.add(o);
                                }
                                for (Object obj: unique)
                                {
                                        if (groupSum == null)
                                                groupSum = new BigDecimal(obj.toString());
                                        else
                                                groupSum = groupSum.add(new BigDecimal(obj.toString()));
                                        counter++;
                                }
                        }
                        else
                        {
                                for (int i = 0; i < groupRows.size(); i++)
                                {
                                        o = expression.eval((Map)groupRows.get(i));
                                        if (o != null)
                                        {
                                                try
                                                {
                                                        if (groupSum == null)
                                                                groupSum = new BigDecimal(o.toString());
                                                        else
                                                                groupSum = groupSum.add(new BigDecimal(o.toString()));
                                                        counter++;
                                                }
                                                catch (NumberFormatException e)
                                                {
                                                }
                                        }
                                }
                        }
                        try
                        {
                                if (groupSum != null)
                                        retval = Long.valueOf(groupSum.longValueExact());
                        }
                        catch (ArithmeticException e)
                        {
                                retval = groupSum.doubleValue();
                        }
                        return retval;
                }

                try
                {
                        if (this.distinctValues != null)
                        {
                                BigDecimal groupSum = null;
                                for (Object obj: this.distinctValues)
                                {
                                        if (groupSum == null)
                                                groupSum = new BigDecimal(obj.toString());
                                        else
                                                groupSum = groupSum.add(new BigDecimal(obj.toString()));
                                }
                                counter = this.distinctValues.size();
                                try
                                {
                                        if (groupSum != null)
                                                retval = Long.valueOf(groupSum.longValueExact());
                                }
                                catch (ArithmeticException e)
                                {
                                        retval = groupSum.doubleValue();
                                }
                        }
                        else
                        {
                                if (sum != null)
                                        retval = Long.valueOf(sum.longValueExact());
                        }
                }
                catch (ArithmeticException e)
                {
                        retval = sum.doubleValue();
                }
                return retval;
        }
        public String toString()
        {
                StringBuffer sb = new StringBuffer("SUM(");
                if (distinctValues != null)
                        sb.append("DISTINCT ");
                sb.append(expression);
                sb.append(")");
                return sb.toString();
        }
        public List<String> usedColumns()
        {
                return new LinkedList<String>();
        }
        public List<String> aggregateColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(expression.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.add(this);
                return result;
        }
        public void processRow(Map<String, Object> env)
        {
                /*
		 * Only consider non-null values.
		 */
                Object o = expression.eval(env);
                if (o != null)
                {
                        try
                        {
                                if (sum == null)
                                        sum = new BigDecimal(o.toString());
                                else
                                        sum = sum.add(new BigDecimal(o.toString()));
                                counter++;
                        }
                        catch (NumberFormatException e)
                        {
                        }
                        if (distinctValues != null)
                        {
                                /*
				 * We want the sum of DISTINCT values, so we have
				 * to keep a list of unique values.
				 */
                                distinctValues.add(o);
                        }
                }
        }
}
class SQLAvgFunction extends SQLSumFunction
{
        public SQLAvgFunction(boolean isDistinct, Expression expression)
        {
                super(isDistinct, expression);
        }
        public Object eval(Map<String, Object> env)
        {
                Object o = super.eval(env);
                if (o != null)
                {
                        double average = ((Number)o).doubleValue() / counter;
                        o = new Double(average);
                }
                return o;
        }
        public String toString()
        {
                StringBuffer sb = new StringBuffer("AVG(");
                if (distinctValues != null)
                        sb.append("DISTINCT ");
                sb.append(expression);
                sb.append(")");
                return sb.toString();
        }
}
class QueryEnvEntry extends Expression
{
        String key;
        Expression expression;
        public QueryEnvEntry(String fieldName)
        {
                this.key = fieldName.toUpperCase();
                this.expression = new ColumnName(fieldName);
        }
        public QueryEnvEntry(String fieldName, Expression exp)
        {
                this.key = fieldName.toUpperCase();
                this.expression = exp;
        }
        public Object eval(Map<String, Object> env)
        {
                return expression.eval(env);
        }
        public String toString()
        {
                return key+": "+expression.toString();
        }
}
class OrderByEntry extends Expression
{
        String order;
        Expression expression;
        public OrderByEntry(Expression expression, String order)
        {
                this.order = order;
                this.expression = expression;
        }
}
class BinaryOperation extends Expression
{
        private static final long MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000;
        char op;
        Expression left, right;
        public BinaryOperation(char op, Expression left, Expression right)
        {
                this.op = op;
                this.left = left;
                this.right = right;
        }
        public Object eval(Map<String, Object> env)
        {
                Object leftEval = left.eval(env);
                Object rightEval = right.eval(env);

                if (leftEval == null || rightEval == null)
                        return null;

                try
                {
                        Integer leftInt;
                        BigInteger bil;
                        boolean isLongExpression = false;

                        if (leftEval instanceof Short)
                        {
                                leftInt = Integer.valueOf(((Short)leftEval).intValue());
                                bil = new BigInteger(leftInt.toString());
                        }
                        else if (leftEval instanceof Long)
                        {
                                bil = new BigInteger(leftEval.toString());
                                isLongExpression = true;
                        }
                        else
                        {
                                leftInt = (Integer)leftEval;
                                bil = new BigInteger(leftInt.toString());
                        }
                        Integer rightInt;
                        BigInteger bir;
                        if (rightEval instanceof Short)
                        {
                                rightInt = Integer.valueOf(((Short)rightEval).intValue());
                                bir = new BigInteger(rightInt.toString());
                        }
                        else if (rightEval instanceof Long)
                        {
                                bir = new BigInteger(rightEval.toString());
                                isLongExpression = true;
                        }
                        else
                        {
                                rightInt = (Integer)rightEval;
                                bir = new BigInteger(rightInt.toString());
                        }
                        if (op == '+')
                                bil = bil.add(bir);
                        if (op == '-')
                                bil = bil.subtract(bir);
                        if (op == '*')
                                bil = bil.multiply(bir);
                        if (op == '/')
                                bil = bil.divide(bir);
                        if (isLongExpression)
                                return new Long(bil.toString());
                        else
                                return new Integer(bil.toString());
                }
                catch (ClassCastException e)
                {
                }
                try
                {
                        Number leftN = (Number)leftEval;
                        BigDecimal bdl = new BigDecimal(leftN.toString());
                        Number rightN = (Number)rightEval;
                        BigDecimal bdr = new BigDecimal(rightN.toString());
                        if (op == '+')
                                return new Double(bdl.add(bdr).toString());
                        if (op == '-')
                                return new Double(bdl.subtract(bdr).toString());
                        if (op == '*')
                                return new Double(bdl.multiply(bdr).toString());
                        MathContext mc = new MathContext("precision=14 roundingMode=HALF_UP");
                        if (op == '/')
                                return new Double(bdl.divide(bdr, mc.getPrecision(), mc.getRoundingMode()).toString());
                }
                catch (ClassCastException e)
                {
                }
                try
                {
                        if (op == '+' && leftEval instanceof Date)
                        {
                                Date leftD = (Date)leftEval;
                                if (rightEval instanceof Time)
                                {
                                        Time rightT = (Time)rightEval;
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        return sc.parseTimestamp(leftD.toString() + " " + rightT.toString());
                                }
                                else
                                {
                                        Long rightLong;
                                        if (rightEval instanceof Short)
                                                rightLong = Long.valueOf(((Short)rightEval).longValue());
                                        else if (rightEval instanceof Long)
                                                rightLong = (Long)rightEval;
                                        else
                                                rightLong = Long.valueOf(((Integer)rightEval).intValue());
                                        return incrementDate(leftD, rightLong.longValue());
                                }
                        }
                        else if (op == '+' && rightEval instanceof Date)
                        {
                                Date rightD = (Date)rightEval;
                                if (leftEval instanceof Time)
                                {
                                        Time leftT = (Time)leftEval;
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        return sc.parseTimestamp(rightD.toString() + " " + leftT.toString());
                                }
                                else
                                {
                                        Long leftLong;
                                        if (leftEval instanceof Short)
                                                leftLong = Long.valueOf(((Short)leftEval).intValue());
                                        else if (leftEval instanceof Long)
                                                leftLong = (Long)rightEval;
                                        else
                                                leftLong = Long.valueOf(((Integer)leftEval).intValue());
                                        return incrementDate(rightD, leftLong.longValue());
                                }
                        }
                        else if (op == '-' && leftEval instanceof Date && rightEval instanceof Long)
                        {
                                return incrementDate((Date)leftEval, -((Long)rightEval).longValue());
                        }
                        else if (op == '-' && leftEval instanceof Date && rightEval instanceof Integer)
                        {
                                return incrementDate((Date)leftEval, -((Integer)rightEval).intValue());
                        }
                        else if (op == '-' && leftEval instanceof Date && rightEval instanceof Short)
                        {
                                return incrementDate((Date)leftEval, -((Short)rightEval).intValue());
                        }
                        else if (op == '-' && (leftEval instanceof Date || rightEval instanceof Date))
                        {
                                if (!(leftEval instanceof Date))
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        leftEval = sc.parseDate(leftEval.toString());
                                }
                                if (!(rightEval instanceof Date))
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        rightEval = sc.parseDate(rightEval.toString());
                                }
                                if (leftEval != null && rightEval != null)
                                {
                                        long nMillis = ((Date)leftEval).getTime() - ((Date)(rightEval)).getTime();
                                        long nDays = (nMillis + MILLISECONDS_PER_DAY / 2) / MILLISECONDS_PER_DAY;
                                        return new Integer((int)nDays);
                                }
                        }
                }
                catch (ClassCastException e)
                {
                }
                try
                {
                        if (op == '+' || op == '-')
                        {
                                Timestamp leftD = (Timestamp)leftEval;
                                long time = leftD.getTime();
                                Number rightN = (Number)rightEval;
                                BigDecimal bdr = new BigDecimal(rightN.toString());
                                if (op == '+')
                                        return new Timestamp(time + bdr.longValue());
                                if (op == '-')
                                        return new Timestamp(time - bdr.longValue());
                        }
                }
                catch (ClassCastException e)
                {
                }
                if(op == '+')
                        return ""+leftEval+rightEval;
                return null;
        }
        private Date incrementDate(Date date, long nDays)
        {
                long newTime = date.getTime() +
                nDays * MILLISECONDS_PER_DAY + MILLISECONDS_PER_DAY / 2;
                Date newDate = new Date(newTime);
                /* Remove any time component from calculated date */
                newDate = Date.valueOf(newDate.toString());
                return newDate;
        }
        public String toString()
        {
                return ""+op+" "+left+" "+right;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(left.usedColumns());
                result.addAll(right.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(left.aggregateFunctions());
                result.addAll(right.aggregateFunctions());
                return result;
        }
}
abstract class LogicalExpression extends Expression
{
        public boolean isTrue(Map<String, Object> env)
        {
                return false;
        }
}
class ParsedExpression extends LogicalExpression
{
        public Expression content;
        private Map<String, Object> placeholders;
        public ParsedExpression(Expression left)
        {
                content = left;
                placeholders = new HashMap<String, Object>();
        }
        public boolean isTrue(Map<String, Object> env)
        {
                if(placeholders != null)
                {
                        Map<String, Object> useThisEnv = new HashMap<String, Object>();
                        useThisEnv.putAll(env);
                        useThisEnv.putAll(placeholders);
                        env = useThisEnv;
                }
                return ((LogicalExpression)content).isTrue(env);
        }
        public Object eval(Map<String, Object> env)
        {
                if(placeholders != null)
                {
                        Map<String, Object> useThisEnv = new HashMap<String, Object>();
                        useThisEnv.putAll(env);
                        useThisEnv.putAll(placeholders);
                        env = useThisEnv;
                }
                return content.eval(env);
        }
        public String toString()
        {
                return content.toString();
        }
        public List<String> usedColumns()
        {
                return content.usedColumns();
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                return content.aggregateFunctions();
        }
        public int getPlaceholdersCount()
        {
                return Placeholder.nextIndex - 1;
        }
        public void setPlaceholdersValues(Object[] values)
        {
                for(int i=1; i<values.length; i++)
                {
                        placeholders.put("?" + i, values[i]);
                }
        }
}
class NotExpression extends LogicalExpression
{
        LogicalExpression content;
        public NotExpression(LogicalExpression arg)
        {
                this.content = arg;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                return !content.isTrue(env);
        }
        public String toString()
        {
                return "NOT "+content;
        }
        public List<String> usedColumns()
        {
                return content.usedColumns();
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                return content.aggregateFunctions();
        }
}
class OrExpression extends LogicalExpression
{
        LogicalExpression left, right;
        public OrExpression(LogicalExpression left, LogicalExpression right)
        {
                this.left = left;
                this.right = right;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                return left.isTrue(env) || right.isTrue(env);
        }
        public String toString()
        {
                return "OR "+left+" "+right;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(left.usedColumns());
                result.addAll(right.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(left.aggregateFunctions());
                result.addAll(right.aggregateFunctions());
                return result;
        }
}
class AndExpression extends LogicalExpression
{
        LogicalExpression left, right;
        public AndExpression(LogicalExpression left, LogicalExpression right)
        {
                this.left = left;
                this.right = right;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                return left.isTrue(env) && right.isTrue(env);
        }
        public String toString()
        {
                return "AND "+left+" "+right;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(left.usedColumns());
                result.addAll(right.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(left.aggregateFunctions());
                result.addAll(right.aggregateFunctions());
                return result;
        }
}
class RelopExpression extends LogicalExpression
{
        String op;
        Expression left, right;
        public RelopExpression(String op, Expression left, Expression right)
        {
                this.op = op;
                this.left = left;
                this.right = right;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                boolean result = false;
                Comparable leftValue = (Comparable)left.eval(env);
                Comparable rightValue = (Comparable)right.eval(env);
                Integer leftComparedToRightObj = compare(leftValue, rightValue,  env);
                if (leftComparedToRightObj != null)
                {
                        int leftComparedToRight = leftComparedToRightObj.intValue();
                        if (leftValue != null && rightValue != null)
                        {
                                if (op.equals("="))
                                {
                                        result = leftComparedToRight == 0;
                                }
                                else if (op.equals("<>") || op.equals("!="))
                                {
                                        result = leftComparedToRight != 0;
                                }
                                else if (op.equals(">"))
                                {
                                        result = leftComparedToRight>0;
                                }
                                else if (op.equals("<"))
                                {
                                        result = leftComparedToRight<0;
                                }
                                else if (op.equals("<=") || op.equals("=<"))
                                {
                                        result = leftComparedToRight <= 0;
                                }
                                else if (op.equals(">=") || op.equals("=>"))
                                {
                                        result = leftComparedToRight >= 0;
                                }
                        }
                }
                return result;
        }
        public static Integer compare(Comparable leftValue,
                Comparable rightValue, Map<String, Object> env)
        {
                Integer leftComparedToRightObj = null;
                try
                {
                        if (leftValue != null && rightValue != null)
                                leftComparedToRightObj = new Integer(leftValue.compareTo(rightValue));
                }
                catch (ClassCastException e)
                {
                }
                try
                {
                        if (leftComparedToRightObj == null)
                        {
                                if (leftValue == null || rightValue == null)
                                {
                                        /*
					 * Do nothing.  Anything compared with NULL is false.
					 */
                                }
                                else if (leftValue instanceof Date)
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        Date date = sc.parseDate(rightValue.toString());
                                        if (date != null)
                                                leftComparedToRightObj = new Integer(leftValue.compareTo(date));
                                }
                                else if (rightValue instanceof Date)
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        Date date = sc.parseDate(leftValue.toString());
                                        if (date != null)
                                                leftComparedToRightObj = new Integer(date.compareTo((Date)rightValue));
                                }
                                else if (leftValue instanceof Time)
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        Time time = sc.parseTime(rightValue.toString());
                                        if (time != null)
                                                leftComparedToRightObj = new Integer(leftValue.compareTo(time));
                                }
                                else if (rightValue instanceof Time)
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        Time time = sc.parseTime(leftValue.toString());
                                        if (time != null)
                                                leftComparedToRightObj = new Integer(time.compareTo((Time)rightValue));
                                }
                                else if (leftValue instanceof Timestamp)
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        Timestamp timestamp = sc.parseTimestamp(rightValue.toString());
                                        if (timestamp != null)
                                                leftComparedToRightObj = new Integer(leftValue.compareTo(timestamp));
                                }
                                else if (rightValue instanceof Timestamp)
                                {
                                        Expression stringConverter = new ColumnName("@StringConverter");
                                        StringConverter sc = (StringConverter) stringConverter.eval(env);
                                        Timestamp timestamp = sc.parseTimestamp(leftValue.toString());
                                        if (timestamp != null)
                                                leftComparedToRightObj = new Integer(timestamp.compareTo((Timestamp)rightValue));
                                }
                                else
                                {
                                        Double leftDouble = new Double(((Number)leftValue).toString());
                                        Double rightDouble = new Double(((Number)rightValue).toString());
                                        leftComparedToRightObj = new Integer(leftDouble.compareTo(rightDouble));
                                }
                        }
                }
        catch (ClassCastException e)
                {
                }
                catch (NumberFormatException e)
                {
                }
                return leftComparedToRightObj;
        }
        public String toString()
        {
                return op+" "+left+" "+right;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(left.usedColumns());
                result.addAll(right.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(left.aggregateFunctions());
                result.addAll(right.aggregateFunctions());
                return result;
        }
}
class BetweenExpression extends LogicalExpression
{
        Expression obj, left, right;
        public BetweenExpression(Expression obj, Expression left, Expression right)
        {
                this.obj = obj;
                this.left = left;
                this.right = right;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                Comparable leftValue = (Comparable)left.eval(env);
                Comparable rightValue = (Comparable)right.eval(env);
                Comparable objValue = (Comparable)obj.eval(env);
                Integer comparedLeft = RelopExpression.compare(leftValue, objValue, env);
                boolean result = false;
                if (comparedLeft != null && comparedLeft.intValue() <= 0)
                {
                        Integer comparedRight = RelopExpression.compare(rightValue, objValue, env);
                        if (comparedRight != null && comparedRight.intValue() >= 0)
                        {
                                result = true;
                        }
                }
                return result;
        }
        public String toString()
        {
                return "B "+obj+" "+left+" "+right;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(obj.usedColumns());
                result.addAll(left.usedColumns());
                result.addAll(right.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(obj.aggregateFunctions());
                result.addAll(left.aggregateFunctions());
                result.addAll(right.aggregateFunctions());
                return result;
        }
}
class IsNullExpression extends LogicalExpression
{
        Expression arg;
        public IsNullExpression(Expression arg)
        {
                this.arg = arg;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                Object o = arg.eval(env);
                return (o == null);
        }
        public String toString()
        {
                return "N "+arg;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(arg.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(arg.aggregateFunctions());
                return result;
        }
}
class LikeExpression extends LogicalExpression
{
        Expression arg1, arg2;
        public LikeExpression(Expression arg1, Expression arg2)
        {
                this.arg1 = arg1;
                this.arg2 = arg2;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                Object left = arg1.eval(env);
                Object right = arg2.eval(env);
                boolean result = false;
                if (left != null && right != null)
                        result = LikePattern.matches(right.toString(), left.toString());
                return result;
        }
        public String toString()
        {
                return "L "+arg1+" "+arg2;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(arg1.usedColumns());
                result.addAll(arg2.usedColumns());
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                result.addAll(arg1.aggregateFunctions());
                result.addAll(arg2.aggregateFunctions());
                return result;
        }
}
class InExpression extends LogicalExpression
{
        Expression obj;
        List<Expression> inList;
        public InExpression(Expression obj, List<Expression> inList)
        {
                this.obj = obj;
                this.inList = inList;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                Comparable objValue = (Comparable)obj.eval(env);
                for (Expression expr: inList)
                {
                        Comparable exprValue = (Comparable)expr.eval(env);
                        Integer compared = RelopExpression.compare(objValue, exprValue, env);
                        if (compared != null && compared.intValue() == 0)
                                return true;
                }
                return false;
        }
        public String toString()
        {
                StringBuffer sb = new StringBuffer();
                sb.append("IN ");
                sb.append(obj.toString());
                sb.append(" (");
                String delimiter = "";
                for (Expression expr: inList)
                {
                        sb.append(delimiter);
                        sb.append(expr.toString());
                        delimiter = ", ";
                }
                sb.append(")");
                return sb.toString();
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                result.addAll(obj.usedColumns());
                for (Expression expr: inList)
                {
                        result.addAll(expr.usedColumns());
                }
                return result;
        }
        public List<AggregateFunction> aggregateFunctions()
        {
                List<AggregateFunction> result = new LinkedList<AggregateFunction>();
                for (Expression expr: inList)
                {
                        result.addAll(expr.aggregateFunctions());
                }
                return result;
        }
}
class AsteriskExpression extends LogicalExpression
{
        String expression;
        public AsteriskExpression(String expression)
        {
                this.expression = expression;
        }
        public boolean isTrue(Map<String, Object> env)
        {
                return false;
        }
        public String toString()
        {
                return expression;
        }
        public List<String> usedColumns()
        {
                List<String> result = new LinkedList<String>();
                return result;
        }
}
class ParsedStatement
{
        List<ParsedExpression> queryEntries;
        boolean isDistinct;
        String tableName;
        String tableAlias;
        ParsedExpression whereClause;
        List<ParsedExpression> groupByEntries;
        ParsedExpression havingClause;
        List<ParsedExpression> orderByEntries;
        int limit, offset;
        public ParsedStatement(List<ParsedExpression> queryEntries, boolean isDistinct,
        String tableName, String tableAlias,
        ParsedExpression whereClause,
        List<ParsedExpression> groupByEntries,
        ParsedExpression havingClause,
        List<ParsedExpression> orderByEntries,
        int limit, int offset)
        {
                this.queryEntries = queryEntries;
                this.isDistinct = isDistinct;
                this.tableName = tableName;
                this.tableAlias = tableAlias;
                this.whereClause = whereClause;
                this.groupByEntries = groupByEntries;
                this.havingClause = havingClause;
                this.orderByEntries = orderByEntries;
                this.limit = limit;
                this.offset = offset;
        }
}
public class ExpressionParser implements ExpressionParserConstants {
        ParsedExpression content;
        private List<ParsedExpression> queryEntries;
        private boolean isDistinct;
        private String tableName;
        private String tableAlias;
        private List<ParsedExpression> groupByEntries;
        private ParsedExpression havingClause;
        private List<ParsedExpression> orderByEntries;
        private int limit;
        private int offset;
        Date currentDate;
        Time currentTime;
        public void parseLogicalExpression()throws ParseException
        {
                content = logicalExpression();
        }
        public void parseGroupByEntry()throws ParseException
        {
                content = groupByEntry();
        }
        public void parseOrderByEntry()throws ParseException
        {
                content = orderByEntry();
        }
        public void parseQueryEnvEntry()throws ParseException
        {
                content = queryEnvEntry();
        }
        public ParsedStatement parseSingleStatement()throws ParseException
        {
                /* Reset prepared statement place-holder counter */
                Placeholder.nextIndex = 1;
                ParsedStatement parsedStatement = singleStatement();
                queryEntries = parsedStatement.queryEntries;
                isDistinct = parsedStatement.isDistinct;
                tableName = parsedStatement.tableName;
                tableAlias = parsedStatement.tableAlias;
                content = parsedStatement.whereClause;
                groupByEntries = parsedStatement.groupByEntries;
                havingClause = parsedStatement.havingClause;
                orderByEntries = parsedStatement.orderByEntries;
                limit = parsedStatement.limit;
                offset = parsedStatement.offset;
                return parsedStatement;
        }
        public List<ParsedStatement> parseMultipleStatements()throws ParseException
        {
                /* Reset prepared statement place-holder counter */
                Placeholder.nextIndex = 1;
                List<ParsedStatement> statements = multipleStatements();
                return statements;
        }
        public Object eval(Map<String, Object> env)
        {
                return content.eval(env);
        }
        public String toString()
        {
                return ""+content;
        }
        public Date getCurrentDate()
        {
                if (currentDate == null)
                {
                        long l = System.currentTimeMillis();
                        currentDate = new Date(l);
                        currentTime = new Time(l);
                        /* Remove any time component from the date */
                        currentDate = Date.valueOf(currentDate.toString());
                }
                return currentDate;
        }
        public Time getCurrentTime()
        {
                if (currentTime == null)
                {
                        long l = System.currentTimeMillis();
                        currentDate = new Date(l);
                        currentTime = new Time(l);
                        /* Remove any time component from the date */
                        currentDate = Date.valueOf(currentDate.toString());
                }
                return currentTime;
        }

  final public ParsedExpression logicalExpression() throws ParseException {
        LogicalExpression left;
    left = logicalOrExpression();
                {if (true) return new ParsedExpression(left);}
    throw new Error("Missing return statement in function");
  }

  final public ParsedExpression groupByEntry() throws ParseException {
  Expression left;
    left = binaryOperation();
                {if (true) return new ParsedExpression(left);}
    throw new Error("Missing return statement in function");
  }

  final public ParsedExpression orderByEntry() throws ParseException {
        Expression left;
        String order;
        Token t;
         order = "ASC";
    left = binaryOperation();
    if (jj_2_3(2)) {
      if (jj_2_1(2)) {
        t = jj_consume_token(ASC);
                                         order=t.image;
      } else if (jj_2_2(2)) {
        t = jj_consume_token(DESC);
                                                                  order=t.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
                {if (true) return new ParsedExpression(new OrderByEntry(left, order));}
    throw new Error("Missing return statement in function");
  }

  final public List<ParsedStatement> multipleStatements() throws ParseException {
        List<ParsedStatement> statements;
        ParsedStatement parsedStatement;
         statements = new LinkedList<ParsedStatement>();
    parsedStatement = selectStatement();
                                            statements.add(parsedStatement);
    label_1:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      if (jj_2_5(2)) {
        parsedStatement = selectStatement();
                                                         statements.add(parsedStatement);
      } else {
        ;
      }
    }
    jj_consume_token(0);
                {if (true) return statements;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedStatement singleStatement() throws ParseException {
        ParsedStatement parsedStatement;
    parsedStatement = selectStatement();
    if (jj_2_6(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    jj_consume_token(0);
                {if (true) return parsedStatement;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedStatement selectStatement() throws ParseException {
        List<ParsedExpression> result;
        ParsedExpression expr;
        boolean isDistinct;
        String tableName;
        String tableAlias;
        ParsedExpression whereClause, entry;
        List<ParsedExpression> groupByEntries;
        ParsedExpression havingClause;
        List<ParsedExpression> orderByEntries;
        int limit, offset;
        Token t;
                result = new LinkedList<ParsedExpression>();
                isDistinct = false;
                tableName = null;
                tableAlias = null;
                whereClause = null;
                groupByEntries = new LinkedList<ParsedExpression>();
                havingClause = null;
                orderByEntries = new LinkedList<ParsedExpression>();
                limit = -1;
                offset = 0;
    jj_consume_token(SELECT);
    if (jj_2_7(2)) {
      jj_consume_token(DISTINCT);
                    isDistinct = true;
    } else {
      ;
    }
    expr = queryEnvEntry();
                               result.add(expr);
    label_2:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      expr = queryEnvEntry();
                                                                                result.add(expr);
    }
    if (jj_2_25(2)) {
      jj_consume_token(FROM);
      if (jj_2_9(2)) {
        t = jj_consume_token(QUOTEDTABLENAME);
      } else if (jj_2_10(2)) {
        t = jj_consume_token(TABLENAME);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                          tableName = StringConverter.removeQuotes(t.image);
      if (jj_2_12(2)) {
        if (jj_2_11(2)) {
          jj_consume_token(AS);
        } else {
          ;
        }
        t = jj_consume_token(NAME);
                                                                                                                              tableAlias = t.image.toUpperCase();
      } else {
        ;
      }
      label_3:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        if (jj_2_14(2)) {
          t = jj_consume_token(QUOTEDTABLENAME);
        } else if (jj_2_15(2)) {
          t = jj_consume_token(TABLENAME);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }

        if (jj_2_16(2)) {
          jj_consume_token(AS);
        } else {
          ;
        }
        t = jj_consume_token(NAME);

      }
      if (jj_2_17(2)) {
        jj_consume_token(WHERE);
        whereClause = logicalExpression();
      } else {
        ;
      }
      if (jj_2_20(2)) {
        jj_consume_token(GROUP);
        jj_consume_token(BY);
        entry = groupByEntry();
                                                   groupByEntries.add(entry);
        label_4:
        while (true) {
          if (jj_2_18(2)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(COMMA);
          entry = groupByEntry();
                                                                                                             groupByEntries.add(entry);
        }
        if (jj_2_19(2)) {
          jj_consume_token(HAVING);
          havingClause = logicalExpression();
        } else {
          ;
        }
      } else {
        ;
      }
      if (jj_2_22(2)) {
        jj_consume_token(ORDER);
        jj_consume_token(BY);
        entry = orderByEntry();
                                                   orderByEntries.add(entry);
        label_5:
        while (true) {
          if (jj_2_21(2)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(COMMA);
          entry = orderByEntry();
                                                                                                             orderByEntries.add(entry);
        }
      } else {
        ;
      }
      if (jj_2_24(2)) {
        jj_consume_token(LIMIT);
        t = jj_consume_token(UNSIGNEDINT);
                                        limit = Integer.parseInt(t.image);
        if (jj_2_23(2)) {
          jj_consume_token(OFFSET);
          t = jj_consume_token(UNSIGNEDINT);
                                                                                                    offset = Integer.parseInt(t.image);
        } else {
          ;
        }
      } else {
        ;
      }
    } else {
      ;
    }
                {if (true) return new ParsedStatement(result, isDistinct, tableName, tableAlias, whereClause, groupByEntries, havingClause, orderByEntries, limit, offset);}
    throw new Error("Missing return statement in function");
  }

  final public ParsedExpression queryEnvEntry() throws ParseException {
        Expression expression, alias, result, asterisk;
        Token t;
    if (jj_2_30(2)) {
                alias = null;
      expression = binaryOperation();
      if (jj_2_27(2)) {
        if (jj_2_26(2)) {
          jj_consume_token(AS);
        } else {
          ;
        }
        alias = columnAlias();
      } else {
        ;
      }
                if (alias != null)
                        result = new QueryEnvEntry(((ColumnName)alias).columnName, expression);
                else if (expression instanceof ColumnName)
                        result = new QueryEnvEntry(((ColumnName)expression).columnName, expression);
                else
                        result = new QueryEnvEntry(expression.toString(), expression);
                {if (true) return new ParsedExpression(result);}
    } else if (jj_2_31(2)) {
      if (jj_2_28(2)) {
        t = jj_consume_token(ASTERISK);
      } else if (jj_2_29(2)) {
        t = jj_consume_token(NAMEASTERISK);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                asterisk = new AsteriskExpression(t.image);
                {if (true) return new ParsedExpression(new QueryEnvEntry(t.image, asterisk));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalExpression logicalOrExpression() throws ParseException {
        LogicalExpression left, right;
    left = logicalAndExpression();
    label_6:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(OR);
      right = logicalAndExpression();
                left = new OrExpression(left, right);
    }
                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public LogicalExpression logicalAndExpression() throws ParseException {
        LogicalExpression left, right;
    left = logicalUnaryExpression();
    label_7:
    while (true) {
      if (jj_2_33(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(AND);
      right = logicalUnaryExpression();
                left = new AndExpression(left, right);
    }
                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public LogicalExpression logicalUnaryExpression() throws ParseException {
        LogicalExpression arg;
    if (jj_2_34(2)) {
      jj_consume_token(NOT);
      arg = logicalUnaryExpression();
                {if (true) return new NotExpression(arg);}
    } else if (jj_2_35(2)) {
      jj_consume_token(OPENPARENTHESIS);
      arg = logicalOrExpression();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return arg;}
    } else if (jj_2_36(2)) {
      arg = relationalExpression();
                {if (true) return arg;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalExpression relationalExpression() throws ParseException {
        Expression arg1, arg2, arg3;
        LogicalExpression expr;
        String op;
        Token t;
        boolean negate;
        List<Expression> inEntries;
                negate = false;
                inEntries = new LinkedList<Expression>();
    arg1 = binaryOperation();
    if (jj_2_43(2)) {
      op = relOp();
      arg2 = binaryOperation();
                {if (true) return new RelopExpression(op, arg1, arg2);}
    } else if (jj_2_44(2)) {
      if (jj_2_37(2)) {
        jj_consume_token(NOT);
                 negate=true;
      } else {
        ;
      }
      if (jj_2_39(2)) {
        jj_consume_token(BETWEEN);
        arg2 = binaryOperation();
        jj_consume_token(AND);
        arg3 = binaryOperation();
                expr = new BetweenExpression(arg1, arg2, arg3);
                if (negate)
                        expr = new NotExpression(expr);
                {if (true) return expr;}
      } else if (jj_2_40(2)) {
        jj_consume_token(LIKE);
        arg2 = binaryOperation();
                expr = new LikeExpression(arg1, arg2);
                if (negate)
                        expr = new NotExpression(expr);
                {if (true) return expr;}
      } else if (jj_2_41(2)) {
        jj_consume_token(IN);
        jj_consume_token(OPENPARENTHESIS);
        arg2 = binaryOperation();
                                                        inEntries.add(arg2);
        label_8:
        while (true) {
          if (jj_2_38(2)) {
            ;
          } else {
            break label_8;
          }
          jj_consume_token(COMMA);
          arg2 = binaryOperation();
                                                                                                              inEntries.add(arg2);
        }
        jj_consume_token(CLOSEPARENTHESIS);
                expr = new InExpression(arg1, inEntries);
                if (negate)
                        expr = new NotExpression(expr);
                {if (true) return expr;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_45(2)) {
      jj_consume_token(IS);
      if (jj_2_42(2)) {
        jj_consume_token(NOT);
                     negate=true;
      } else {
        ;
      }
      jj_consume_token(NULL);
                expr = new IsNullExpression(arg1);
                if (negate)
                        expr = new NotExpression(expr);
                {if (true) return expr;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String relOp() throws ParseException {
        Token t;
    t = jj_consume_token(RELOP);
                {if (true) return new String(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public char binAddOp() throws ParseException {
        Token t;
    if (jj_2_46(2)) {
      t = jj_consume_token(PLUS);
    } else if (jj_2_47(2)) {
      t = jj_consume_token(MINUS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image.charAt(0);}
    throw new Error("Missing return statement in function");
  }

  final public char binMultiplyOp() throws ParseException {
        Token t;
    if (jj_2_48(2)) {
      t = jj_consume_token(ASTERISK);
    } else if (jj_2_49(2)) {
      t = jj_consume_token(DIVIDE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image.charAt(0);}
    throw new Error("Missing return statement in function");
  }

  final public Expression countOperation() throws ParseException {
        Expression arg;
        Token t;
    if (jj_2_50(2)) {
      t = jj_consume_token(ASTERISK);
                {if (true) return new AsteriskExpression(t.image);}
    } else if (jj_2_51(2)) {
      arg = binaryOperation();
                {if (true) return arg;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression binaryOperation() throws ParseException {
        Expression left, right;
        char op;
    left = multiplyOperation();
    label_9:
    while (true) {
      if (jj_2_52(2)) {
        ;
      } else {
        break label_9;
      }
      op = binAddOp();
      right = multiplyOperation();
                left = new BinaryOperation(op, left, right);
    }
                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multiplyOperation() throws ParseException {
        Expression left, right;
        char op;
    left = simpleExpression();
    label_10:
    while (true) {
      if (jj_2_53(2)) {
        ;
      } else {
        break label_10;
      }
      op = binMultiplyOp();
      right = simpleExpression();
                left = new BinaryOperation(op, left, right);
    }
                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression simpleExpression() throws ParseException {
        Expression arg;
        Expression arg2;
        boolean isDistinct;
    if (jj_2_59(2)) {
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return arg;}
    } else if (jj_2_60(2)) {
      jj_consume_token(UPPER);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLUpperFunction(arg);}
    } else if (jj_2_61(2)) {
      jj_consume_token(LOWER);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLLowerFunction(arg);}
    } else if (jj_2_62(2)) {
      jj_consume_token(LENGTH);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLLengthFunction(arg);}
    } else if (jj_2_63(2)) {
      jj_consume_token(ROUND);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLRoundFunction(arg);}
    } else if (jj_2_64(2)) {
      jj_consume_token(DAYOFMONTH);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLDayOfMonthFunction(arg);}
    } else if (jj_2_65(2)) {
      jj_consume_token(MONTH);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLMonthFunction(arg);}
    } else if (jj_2_66(2)) {
      jj_consume_token(YEAR);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLYearFunction(arg);}
    } else if (jj_2_67(2)) {
      jj_consume_token(HOUROFDAY);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLHourOfDayFunction(arg);}
    } else if (jj_2_68(2)) {
      jj_consume_token(MINUTE);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLMinuteFunction(arg);}
    } else if (jj_2_69(2)) {
      jj_consume_token(SECOND);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLSecondFunction(arg);}
    } else if (jj_2_70(2)) {
      jj_consume_token(NULLIF);
      jj_consume_token(OPENPARENTHESIS);
      arg = binaryOperation();
      jj_consume_token(COMMA);
      arg2 = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLNullIfFunction(arg, arg2);}
    } else if (jj_2_71(2)) {
      jj_consume_token(COUNT);
      jj_consume_token(OPENPARENTHESIS);
                                    isDistinct = false;
      if (jj_2_54(2)) {
        jj_consume_token(DISTINCT);
                            isDistinct = true;
      } else {
        ;
      }
      arg = countOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLCountFunction(isDistinct, arg);}
    } else if (jj_2_72(2)) {
      jj_consume_token(MAX);
      jj_consume_token(OPENPARENTHESIS);
                                  isDistinct = false;
      if (jj_2_55(2)) {
        jj_consume_token(DISTINCT);
                            isDistinct = true;
      } else {
        ;
      }
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLMaxFunction(isDistinct, arg);}
    } else if (jj_2_73(2)) {
      jj_consume_token(MIN);
      jj_consume_token(OPENPARENTHESIS);
                                  isDistinct = false;
      if (jj_2_56(2)) {
        jj_consume_token(DISTINCT);
                            isDistinct = true;
      } else {
        ;
      }
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLMinFunction(isDistinct, arg);}
    } else if (jj_2_74(2)) {
      jj_consume_token(SUM);
      jj_consume_token(OPENPARENTHESIS);
                                  isDistinct = false;
      if (jj_2_57(2)) {
        jj_consume_token(DISTINCT);
                            isDistinct = true;
      } else {
        ;
      }
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLSumFunction(isDistinct, arg);}
    } else if (jj_2_75(2)) {
      jj_consume_token(AVG);
      jj_consume_token(OPENPARENTHESIS);
                                  isDistinct = false;
      if (jj_2_58(2)) {
        jj_consume_token(DISTINCT);
                            isDistinct = true;
      } else {
        ;
      }
      arg = binaryOperation();
      jj_consume_token(CLOSEPARENTHESIS);
                {if (true) return new SQLAvgFunction(isDistinct, arg);}
    } else if (jj_2_76(2)) {
      arg = columnName();
                {if (true) return arg;}
    } else if (jj_2_77(2)) {
      arg = numericConstant();
                {if (true) return arg;}
    } else if (jj_2_78(2)) {
      arg = stringConstant();
                {if (true) return arg;}
    } else if (jj_2_79(2)) {
      jj_consume_token(NULL);
                {if (true) return new NullConstant();}
    } else if (jj_2_80(2)) {
      jj_consume_token(CURRENT_DATE);
                {if (true) return new CurrentDateConstant(this);}
    } else if (jj_2_81(2)) {
      jj_consume_token(CURRENT_TIME);
                {if (true) return new CurrentTimeConstant(this);}
    } else if (jj_2_82(2)) {
      jj_consume_token(PLACEHOLDER);
                {if (true) return new Placeholder();}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression columnName() throws ParseException {
        Token t;
    if (jj_2_83(2)) {
      t = jj_consume_token(NAME);
    } else if (jj_2_84(2)) {
      t = jj_consume_token(DAYOFMONTH);
    } else if (jj_2_85(2)) {
      t = jj_consume_token(MONTH);
    } else if (jj_2_86(2)) {
      t = jj_consume_token(YEAR);
    } else if (jj_2_87(2)) {
      t = jj_consume_token(HOUROFDAY);
    } else if (jj_2_88(2)) {
      t = jj_consume_token(MINUTE);
    } else if (jj_2_89(2)) {
      t = jj_consume_token(SECOND);
    } else if (jj_2_90(2)) {
      t = jj_consume_token(LOWER);
    } else if (jj_2_91(2)) {
      t = jj_consume_token(ROUND);
    } else if (jj_2_92(2)) {
      t = jj_consume_token(UPPER);
    } else if (jj_2_93(2)) {
      t = jj_consume_token(LENGTH);
    } else if (jj_2_94(2)) {
      t = jj_consume_token(NULLIF);
    } else if (jj_2_95(2)) {
      t = jj_consume_token(AVG);
    } else if (jj_2_96(2)) {
      t = jj_consume_token(COUNT);
    } else if (jj_2_97(2)) {
      t = jj_consume_token(MAX);
    } else if (jj_2_98(2)) {
      t = jj_consume_token(MIN);
    } else if (jj_2_99(2)) {
      t = jj_consume_token(SUM);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new ColumnName(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Expression numericConstant() throws ParseException {
        Token t;
        String sign, digits;
        boolean isLong;
         sign="";
    if (jj_2_100(2)) {
      t = jj_consume_token(MINUS);
                   sign=t.image;
    } else {
      ;
    }
    if (jj_2_101(2)) {
      t = jj_consume_token(UNSIGNEDNUMBER);
    } else if (jj_2_102(2)) {
      t = jj_consume_token(UNSIGNEDINT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                Number value = null;
                digits = sign+t.image;
                isLong = false;
                if (digits.toUpperCase().endsWith("L"))
                {
                        digits = digits.substring(0, digits.length() - 1);
                        isLong = true;
                }
                try
                {
                        value = new Long(digits);
                        if (isLong == false && value.longValue() >= Integer.MIN_VALUE && value.longValue() <= Integer.MAX_VALUE)
                                value = Integer.valueOf(value.intValue());
                }
                catch (NumberFormatException e)
                {
                        value = new Double(digits);
                }
                {if (true) return new NumericConstant(value);}
    throw new Error("Missing return statement in function");
  }

  final public Expression stringConstant() throws ParseException {
        String left, right;
    left = stringConstantAtom();
    label_11:
    while (true) {
      if (jj_2_103(2)) {
        ;
      } else {
        break label_11;
      }
      right = stringConstantAtom();
                left = left+"'"+right;
    }
                {if (true) return new StringConstant(left);}
    throw new Error("Missing return statement in function");
  }

  final public String stringConstantAtom() throws ParseException {
        Token t;
    t = jj_consume_token(STRING);
                {if (true) return t.image.substring(1, t.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

  final public Expression columnAlias() throws ParseException {
        Token t;
    if (jj_2_104(2)) {
      t = jj_consume_token(NAME);
    } else if (jj_2_105(2)) {
      t = jj_consume_token(DAYOFMONTH);
    } else if (jj_2_106(2)) {
      t = jj_consume_token(MONTH);
    } else if (jj_2_107(2)) {
      t = jj_consume_token(YEAR);
    } else if (jj_2_108(2)) {
      t = jj_consume_token(HOUROFDAY);
    } else if (jj_2_109(2)) {
      t = jj_consume_token(MINUTE);
    } else if (jj_2_110(2)) {
      t = jj_consume_token(SECOND);
    } else if (jj_2_111(2)) {
      t = jj_consume_token(LOWER);
    } else if (jj_2_112(2)) {
      t = jj_consume_token(ROUND);
    } else if (jj_2_113(2)) {
      t = jj_consume_token(UPPER);
    } else if (jj_2_114(2)) {
      t = jj_consume_token(LENGTH);
    } else if (jj_2_115(2)) {
      t = jj_consume_token(NULLIF);
    } else if (jj_2_116(2)) {
      t = jj_consume_token(AVG);
    } else if (jj_2_117(2)) {
      t = jj_consume_token(COUNT);
    } else if (jj_2_118(2)) {
      t = jj_consume_token(MAX);
    } else if (jj_2_119(2)) {
      t = jj_consume_token(MIN);
    } else if (jj_2_120(2)) {
      t = jj_consume_token(SUM);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new ColumnName(t.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_3_77() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_112() {
    if (jj_scan_token(ROUND)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(AVG)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_scan_token(LOWER)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_scan_token(UNSIGNEDINT)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(MINUTE)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(NULLIF)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(NULLIF)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(SECOND)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(MINUTE)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(HOUROFDAY)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_scan_token(HOUROFDAY)) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(YEAR)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(MONTH)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NAMEASTERISK)) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_scan_token(YEAR)) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(UPPER)) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(DAYOFMONTH)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(ROUND)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(TABLENAME)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_scan_token(MONTH)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(ROUND)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(LOWER)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(DAYOFMONTH)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(QUOTEDTABLENAME)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_scan_token(UNSIGNEDINT)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(FROM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(MINUTE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(TABLENAME)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(HOUROFDAY)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(UNSIGNEDINT)) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(YEAR)) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(QUOTEDTABLENAME)) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(MONTH)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    return false;
  }

  private boolean jj_3_117() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(UNSIGNEDNUMBER)) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(DAYOFMONTH)) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(RELOP)) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_scan_token(NULLIF)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(PLACEHOLDER)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(CURRENT_TIME)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_23()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_114() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(CURRENT_DATE)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_scan_token(UPPER)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[120];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[71];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 71; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 120; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
