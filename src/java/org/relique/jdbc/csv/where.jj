options{  STATIC = false;  LOOKAHEAD = 1;}PARSER_BEGIN(LogicalExpressionParser)package org.relique.jdbc.csv;import java.util.Map;abstract class Expression{  public Object eval(Map env){    return null;  }}abstract class LogicalExpression extends Expression{  public boolean isTrue(Map env){    return false;  }}class ParsedExpression extends LogicalExpression{  LogicalExpression content;  public ParsedExpression(LogicalExpression left){    content = left;  }  public boolean isTrue(Map env){    return content.isTrue(env);  }  public String toString(){    return content.toString();  }}class NotExpression extends LogicalExpression{  LogicalExpression arg;  public NotExpression(LogicalExpression arg){    this .arg = arg;  }  public boolean isTrue(Map env){    return !arg.isTrue(env);  }  public String toString(){    return "NOT "+arg;  }}class OrExpression extends LogicalExpression{  LogicalExpression left, right;  public OrExpression(LogicalExpression left, LogicalExpression right){    this .left = left;    this .right = right;  }  public boolean isTrue(Map env){    return left.isTrue(env) || right.isTrue(env);  }  public String toString(){    return "OR "+left+" "+right;  }}class AndExpression extends LogicalExpression{  LogicalExpression left, right;  public AndExpression(LogicalExpression left, LogicalExpression right){    this .left = left;    this .right = right;  }  public boolean isTrue(Map env){    return left.isTrue(env) && right.isTrue(env);  }  public String toString(){    return "AND "+left+" "+right;  }}class NumericConstant extends Expression{  Number value;  public NumericConstant(Number d){    value = d;  }  public Object eval(Map env){    return value;  }  public String toString(){    return value.toString();  }}class StringConstant extends Expression{  String value;  public StringConstant(String s){    value = s;  }  public Object eval(Map env){    return value;  }  public String toString(){    return "'"+value+"'";  }}class RelopExpression extends LogicalExpression{  String op;  Expression left, right;  public RelopExpression(String op, Expression left, Expression right){    this .op = op;    this .left = left;    this .right = right;  }  public boolean isTrue(Map env){    Comparable leftValue = (Comparable)left.eval(env);    Comparable rightValue = (Comparable)right.eval(env);    boolean result = false;    if (leftValue != null && rightValue != null){      if (op.equals("=")){        result = (leftValue.equals(rightValue));      }      else if (op.equals("<>") || op.equals("!=")){        result = !(leftValue.equals(rightValue));      }    }    return result;  }  public String toString(){    return op+" "+left+" "+right;  }}class BetweenExpression extends LogicalExpression{  Expression obj, left, right;  public BetweenExpression(Expression obj, Expression left, Expression right){    this .obj = obj;    this .left = left;    this .right = right;  }  public boolean isTrue(Map env){    Comparable leftValue = (Comparable)left.eval(env);    Comparable rightValue = (Comparable)right.eval(env);    Comparable objValue = (Comparable)obj.eval(env);    boolean result = true;    try {      if (objValue.compareTo(leftValue)<0)result = false;      if (objValue.compareTo(rightValue)>0)result = false;    }    catch (ClassCastException e){}return result;  }  public String toString(){    return "B "+obj+" "+left+" "+right;  }}class IsNullExpression extends LogicalExpression{  Object arg;  public IsNullExpression(Object arg){    this .arg = arg;  }  public boolean isTrue(Map env){    if (env.get(arg) == null)return true;    return false;  }  public String toString(){    return "N "+arg;  }}class LikeExpression extends LogicalExpression{  Object arg1, arg2;  public LikeExpression(Object arg1, Object arg2){    this .arg1 = arg1;    this .arg2 = arg2;  }  public boolean isTrue(Map env){    return true;  }  public String toString(){    return "L "+arg1+" "+arg2;  }}class Field extends Expression{  String fieldName;  public Field(String fieldName){    this .fieldName = fieldName.toUpperCase();  }  public Object eval(Map env){    return env.get(fieldName);  }  public String toString(){    return "["+fieldName+"]";  }}public class LogicalExpressionParser{  ParsedExpression content;  public void parse()throws ParseException{    content = logicalExpression();  }  public boolean eval(Map env){    return content.isTrue(env);  }  public String toString(){    return ""+content;  }}PARSER_END(LogicalExpressionParser)SKIP:{  " "  | "\t"  | "\n"}TOKEN:{  <NUMBER:<DIGITS>  | <DIGITS>"."<DIGITS>  | "."<DIGITS>  | <DIGITS>".">}TOKEN:{  <#DIGITS:(["0"-"9"])+>}TOKEN:{  <NULL:"NULL">}TOKEN:{  <AND:"AND">}TOKEN:{  <OR:"OR">}TOKEN:{  <NOT:"NOT">}TOKEN:{  <IS:"IS">}TOKEN:{  <LIKE:"LIKE">}TOKEN:{  <BETWEEN:"BETWEEN">}TOKEN:{  <NAME:(["0"-"9", "A"-"Z", "a"-"z", "_"])+>}TOKEN:{  <STRING:"'"(["0"-"9", "A"-"Z", "a"-"z", "_", " "])+"'">}TOKEN:{  <RELOP:(">"  | "<"  | ">="  | "<="  | "<>"  | "="  | "!=")>}ParsedExpression logicalExpression():{  LogicalExpression left;}{  left = logicalOrExpression()<EOF>{    return new ParsedExpression(left);  }}LogicalExpression logicalOrExpression():{  LogicalExpression left, right;}{  left = logicalAndExpression()(<OR>right = logicalAndExpression(){    left = new OrExpression(left, right);  }  )*{    return left;  }}LogicalExpression logicalAndExpression():{  LogicalExpression left, right;}{  left = logicalUnaryExpression()(<AND>right = logicalUnaryExpression(){    left = new AndExpression(left, right);  }  )*{    return left;  }}LogicalExpression logicalUnaryExpression():{  LogicalExpression arg;}{  <NOT>arg = logicalUnaryExpression(){    return new NotExpression(arg);  }  | "("arg = logicalOrExpression()")"{    return arg;  }  | arg = relationalExpression(){    return arg;  }}LogicalExpression relationalExpression():{  Expression arg1, arg2, arg3;  String op;  Token t;}{  arg1 = simpleExpression()(op = relop()arg2 = simpleExpression(){    return new RelopExpression(op, arg1, arg2);  }  | <BETWEEN>arg2 = simpleExpression()<AND>arg3 = simpleExpression(){    return new BetweenExpression(arg1, arg2, arg3);  }  | <IS><NULL>{    return new IsNullExpression(arg1);  }  | <LIKE>t = <STRING>{    return new LikeExpression(arg1, new StringConstant(t.image.substring(1, t.image.length()-1)));  }  )}String relop():{  Token t;}{  t = <RELOP>{    return new String(t.image);  }}Expression simpleExpression():{  Expression arg;}{  arg = columnName(){    return arg;  }  | arg = literal(){    return arg;  }}Expression columnName():{  Token t;}{  t = <NAME>{    return new Field(t.image);  }}Expression literal():{  Token t;}{  t = <NUMBER>{    Number value = null;    try {      value = new Integer(t.image);    }    catch (NumberFormatException e){      value = new Double(t.image);    }    return new NumericConstant(value);  }  | t = <STRING>{    return new StringConstant(t.image.substring(1, t.image.length()-1));  }  | <NULL>{    return null;  }}